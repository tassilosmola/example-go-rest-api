// Code generated by mockery v2.16.0. DO NOT EDIT.

package service

import (
	repository "example-go-api/repository"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleService is an autogenerated mock type for the ArticleService type
type MockArticleService struct {
	mock.Mock
}

// AddArticle provides a mock function with given fields: article
func (_m *MockArticleService) AddArticle(article repository.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteArticle provides a mock function with given fields: id
func (_m *MockArticleService) DeleteArticle(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllArticles provides a mock function with given fields:
func (_m *MockArticleService) GetAllArticles() ([]repository.Article, error) {
	ret := _m.Called()

	var r0 []repository.Article
	if rf, ok := ret.Get(0).(func() []repository.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticle provides a mock function with given fields: id
func (_m *MockArticleService) GetArticle(id string) (repository.Article, error) {
	ret := _m.Called(id)

	var r0 repository.Article
	if rf, ok := ret.Get(0).(func(string) repository.Article); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.Article)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockArticleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArticleService creates a new instance of MockArticleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArticleService(t mockConstructorTestingTNewMockArticleService) *MockArticleService {
	mock := &MockArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
